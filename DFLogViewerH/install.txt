DFLogViewerH

Home page:
https://github.com/igor720/df-log-viewer-h

This package does not require system level instalation.
Just run dflv[.exe] program with specified configuration (see below).

If you want option to run the application with different configurations,
then use --work-dir command line switch for directories containing 
various configurations.

By default the application uses configuration files 
in the program's directory.

1. Commamd line.

dfvh(.exe) [--work-dir="working directory"] [--gamelog="logfilepath"]

2. Configuration.

This consists of following files:
- dflv.yaml: main application config
- colors: color scheme
- windows: specification of log entries distribution on log windows
- winsize: file with last saved application's window sizes
- assets folder: contains fonts

'colors' and 'windows' files must contain valid Haskell expression for
Data.Map.Map value. So if any of them is corrupted
you can recreate it using string 'fromList []' for default configuration.

Content of 'colors' file can be modified in dialog 'Colors'. Also,
content of 'windows' file can be modified in dialog 'Windows'. Here are five
panels: the left and biggest one is for hidding log entries 
of chosen tag (type), other pannels correspond to sertain log windows.

If 'winsize' file is corrupted, just delete it. It will be recreated from main
configuration parameters in 'dflv.yaml'

'dflv.yaml' file is not writable by the application itself. 
Nevertheless, if it is corrupted you can copy it from distribution or a backup.

3. Specifying Dwarf Fortress game log location.

There are 4 different methods to do this.

- Specifying the path to a 'gamelog.txt' in command line.
- Specifying the path to a 'gamelog.txt' in 'dflv.yaml'.
- Placing distribition directory (with executable and config files) 
    in 'utilities' directory of PeridexisErrant's Starter Pack.
- Placing distribition directory (with executable and config files) 
    in directory which is parent to 'Dwarf Fortress 0.xx.xx' directory.

More early methods have priority to more later ones.

The third and forth methods assume that there is only one directory which 
starts with 'Dwarf Fortress' string and contains Dwarf Fortress game files.

4. dflv.yaml - Main configuration.

Mostly you can understand options by reading comments in this file. 
Here are some additional explanations.

- You can specify other fonts for use. Place them in 'assets' folder and
change 'regularFont' and 'emphasizeFont' options respectively. By default, 
the application uses Roboto fonts family
(https://fonts.google.com/specimen/Roboto),
which don't have symbols for some Unicode code points (U+2xxx).

- If you specify 'logWindows' option to value less then 4, then log entries
designated to unavalable windows will appear in the last avalable window.

- *Decor* options add ups to each other, so you can specify any number 
of them (max 3) for any log component type (dorf or creature, material, job).

- 'logFilePath' option workes only if there is no command line specification
for gamelog path. Also it prevents look up mechanism for DF gamelog 
from working.

5. Upgrading.

If you did not made any changes to configuration, then you can just override
all files.

If you made some changes to configuration, then you may want to copy 
configuration files (see Configuration section above) to new installation.
This is applicable to 'colors', 'windows', and 'winsize' files; if upgrade
includes new parsing rules, then corresponding log entries will appear
in default (4) log window and will have default (white) color.

Placing old dflv.yaml in new installation may be appropriate if no new opts
were made or they are optional. If not, you have to make manual edits.

6. Default rule - invalid parsing.

Since currently not all log records are correctly described 
in the parsing rules, such records appear with the 'default' tag. 
In this case, you can write incorrectly parsed records to issues
on the project's github page. Or, alternatively, you can make commits 
to the project, with appropriate tests (base knowledge of Haskell required).





